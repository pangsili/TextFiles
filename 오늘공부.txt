syso cntl+space

syso 하고 컨트롤+스페 하면 System.out.println() 이 자동으로 채워진다!


ModelAndView 를 사용하는 이유

컨트롤러에서 view에 전달하는 방법은 2가지(Model, ModelAndView)

Model은 model attrivutes를 저장하는 interface이다. 주로 addAttribute 메서드를 이용해서 데이터를 Model에 저장한다.

model.addAttribute 메서드는 key/value 형태로 값을 임시로 저장한다. 이 때 컨트롤러는 Model에 데이터를 저장하고 View Name을 Return하면서 View로 넘어간다. 이 때 View는 Model에 저장된 Data를 참고하여 결과를 화면에 출력한다.

ModelAndView는 interface가 아니라 class이기 때문에 내부에서 객체를 생성해서 사용해야 한다. 그리고 Model보다 기능이 더 많다.



for(:)

for(int i = 0; i < 3; i++){

	alert(i);

}

() 맨 왼쪽부터 begin : 반복문에 진입할 때 단 한번만 실행됩니다.

condition : 반복을 할 때마다 조건이 확인됩니다. false 라면 반복문을 멈춥니다.

step : 각 반복의 body가 실행된 이후에 실행됩니다.

body : {} 내부 if문과 동일하다.


확장된 for문 // 이걸 더 자주씀 이젠

for(타입 변수명 : 배열 또는 컬렉션){

	// 배열 또는 컬렉션에 저장된 값이 매 반복마다 하나씩 순서대로 읽혀져 변수에 저장된다.

}



String [ [], [], [] ] // 2차원 배열

2차원 배열은 [](대괄호)를 두번 사용해서 선언하며, 첫 번째 대괄호에는 세로 크기, 두번째 대괄호에는 가로 크기를 지정합니다. 일반적으로 2차원 공간은 가로x세로로 표기하지만 배열로 만들 때는 세로x가로로 표기합니다. 꼭 기억해두세요.

자료형 배열이름[세로크기][가로크기] = { {값, 값, 값}, {값, 값, 값} };

{}를 사용해서 배열에 값을 할당하는 방법은 배열을 선언할 때만 사용할 수 있으며 이미 선언된 배열에는 사용할 수 없습니다.

2차원 배열의 요소에 접근하려면 배열 뒤에 [] 를 두번 사용하며 [] 안에 세로와 가로 인덱스를 지정해주면 됩니다.
ex) int num1 = numArr[1][2]; // 2차원 배열에서 세로 인덱스1, 가로 인덱스2인 요소에 접근한다.


Map / HashMap

깃허브에 정리


singleton

싱글톤 패턴 : 인스턴스가 필요할 때, 똑같은 인스턴스를 만들지 않고 기존의 인스턴스를 활용하는 것!

생성자가 여러번 호출되더라도, 실제로 생성되는 객체는 하나이며, 최초로 생성된 이후에 호출된 생성자는 이미 생성한 객체를 반환시키도록 만드는 것이다.

java에서는 생성자를 private츠로 선언해 다른 곳에서 생성하지 못하도록 만들고, getInstance() 메서드를 통해서 받아서 사용하도록 구현한다.

쓰는 이유

객체를 생성한다는건 메모리 영역을 할당받는다는 것, 계속 생성하면 그만큼 메모리 손실 // 단 한번의 new를 통해서 객체를 생성한다면 메모리 낭비를 방지할 수 있다.

또한 싱글톤으로 구현한 인스턴스는 전역 인스턴스 이므로, 다른 클래스의 인스턴스들이 데이터를 공유하는 것이 가능하다는 장점도 있다.


기능구현은 못해도 생각정리 정도는 해두자














