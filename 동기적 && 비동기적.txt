동기화, 비동기화

동기 : 순서대로 진행한다.
	한줄이 끝나기전엔 다른 것들은 실행하지 않는다.
	
비동기 : 순서대로만 진행되는건 아니다.
	한줄이 끝나지 않더라고 일정 시간(겁나짧음)이 지나면 다름줄도 실행해버린다.


Java : 동기
JavaScript : 비동기


비동기 -> 동기 방법

1. callback

function A(){}
function B(){}
function C(){}
function D(){} 4개의 function이 있다고 가정

위 처럼 소스를 작성하면 자바스크립트에서는 비동기적으로 작동되어 A가 끝나지 않았는데 C가 실행되는 등이 발생할 수 있다.

위의 function들을 ABCD순서로 강제로 진행시키고 싶다면, 

function A(B, C, D){

}
처럼 매개변수 / 인자 안에 function 그 자체를 넣은 뒤, 특정 조건에 부합하면 B를 실행한다. 다음 조건을 부합하면 C를 실행한다.

등의 소스를 작성하여 동기적인 처리방식으로 진행시킬 수 있다.

callback방법은 function이 수도없이 많아진다고 가정하면, callback지옥(너무 많음)에 빠질 가능성이 높다.


2. async / await

어떠한 function을 만들어낼 때 앞에 async를 앞에 먼저 붙이고,

함수의 내용 안에 동기적 처리를 하고 싶은 메서드명의 앞에 await를 붙이면 된다.

예시)
async function 함수명() {
  await 비동기_처리_메서드_명();
}

이 방법으로 만든 함수를 라이브러리 등으로 저장해서 배포하게 된다면, 해당 라이브러리를 사용하는 사람은 이 함수가 동기인지 비동기인지 확인을 하기가 굉장히 힘들다.

그래서 이 함수를 동기처럼 쓰고 싶다고 하더라도 라이브러리를 파헤쳐봐야 하는 단점이 있다.


3. promise

이 방법은 함수를 만들때가 아닌, 선언할 때에 함수 앞에 붙여서 동기적인 처리를 하게 하는 방법이다.

프로미스는 Promise 생성자 함수를 통해 인스턴스화한다. Promise 생성자 함수는 비동기 작업을 수행할 콜백 함수를 인자로 전달받는데 이 콜백 함수는 resolve와 reject 함수를 인자로 전달받는다.

// Promise 객체의 생성
const promise = new Promise((resolve, reject) => {
  // 비동기 작업을 수행한다.

  if (/* 비동기 작업 수행 성공 */) {
    resolve('result');
  }
  else { /* 비동기 작업 수행 실패 */
    reject('failure reason');
  }
});
Promise는 비동기 처리가 성공(fulfilled)하였는지 또는 실패(rejected)하였는지 등의 상태(state) 정보를 갖는다.

pending: 비동기 처리가 아직 수행되지 않은 상태
fulfilled: 비동기 처리가 수행된 상태 (성공)
rejected: 비동기 처리가 수행된 상태 (실패)
settled: 비동기 처리가 수행된 상태 (성공 또는 실패)



